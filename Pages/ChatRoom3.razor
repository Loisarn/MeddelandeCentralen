@page "/chatroom3"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@using MeddelandeCentralen.Data;

<h1 class="pagetitle">Chatrum 3</h1>
<hr />

@if (!_isChatting)
{
    <div class="user-text">
    <p class="userName">Användarnamn</p>

    <input type="text" class="textbox" maxlength="30" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span></button>
</div>

    //Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    //banner to show user
    <div class="alert alert-secondary mt-4" role="alert">
    <span class="oi oi-person mr-2" aria-hidden="true"></span>
    <span>Du är inloggad som <b>@_username</b></span>
    <button class="btn btn-white btn-animate" @onclick="@DisconnectAsync">Logga ut</button>
</div>
    //display messages
    <div id="scrollbox">
    @foreach (var item in _messages)
        {
            <div class="@item.CSS">
                <div class="user">@item.Username</div>
                <div class="msg">@item.Body</div>
                <div class="small">@DateTime.Now</div>
            </div>
        }
        <hr />
        <textarea class="input-lg" placeholder="Skriv här" @bind="@_newMessage"></textarea>
        <button class="btn-send" @onclick="@(() => SendAsync(_newMessage))"><span class="send">Skicka</span></button>
    </div>
}

@code {
    private bool _isChatting = false;
    private string? _username;
    private string? _message;
    private string? _newMessage;
    private List<Message> _messages = new List<Message>();
    private string? _hubUrl;
    private HubConnection _hubConnection;

    public async Task Chat()
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Skriv ditt namn";
            return;
        };

        try
        {
            _isChatting = true;
            await Task.Delay(1);

            _messages.Clear();

            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + SampleHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public string CSS => Mine ? "sent" : "received";
    }
}